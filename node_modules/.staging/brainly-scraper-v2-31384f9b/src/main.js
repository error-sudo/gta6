"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const got_1 = __importDefault(require("got"));
const config_1 = require("./config");
const error_1 = __importDefault(require("./error"));
const random_useragent_1 = __importDefault(require("random-useragent"));
const util_1 = __importDefault(require("./util"));
const package_json_1 = require("../package.json");
class Brainly {
    /**
     *
     * @param country - Here, please put your application server country code. if you do not enter valid region/country code. It will trigger an Error Exception.
     */
    constructor(country = "id") {
        this.country = country;
        this.version = package_json_1.version;
        this.clientRequest = (lang) => got_1.default.extend({
            prefixUrl: `${this.getBaseURL(this.country)}/graphql`,
            headers: {
                "user-agent": this.getAgent(),
                "origin": this.getBaseURL(lang),
                "sec-gpc": "1",
                "sec-fetch-dest": "empty",
                "sec-fetch-mode": "cors",
                "sec-fetch-site": "same-origin",
                "batch": "true"
            }
        });
        if (!this.isValidLanguage(country))
            throw new error_1.default("Please put valid country!");
    }
    /**
     * Use this function if you want search question, it will returns question detail, question author, answer detail, attachments (if question or answer attachments is any), rating question and answer.
     *
     * @param language What language want to search?
     * @param question A question you want to search. Example: `Pythagoras theory`
     * @param length Length array from question list
     */
    search(language = "id", question, length = 10) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.isValidLanguage(language))
                    throw new error_1.default("Please put valid language!");
                const body = this.getRequestBody(question, length);
                const response = yield this.clientRequest(this.country.toLowerCase()).post(language.toLowerCase(), {
                    json: body
                });
                const validJSON = JSON.parse(response.body)[0].data.questionSearch.edges;
                const objects = validJSON.map(obj => {
                    const question = util_1.default.convertQuestion(obj.node);
                    const answers = obj.node.answers.nodes.map(answerObj => util_1.default.convertAnswer(answerObj));
                    return {
                        question, answers
                    };
                });
                return objects;
            }
            catch (err) {
                throw new error_1.default(err);
            }
        });
    }
    getRequestBody(question, length = 10) {
        return [{
                operationName: "SearchQuery",
                query: config_1.graphql_query,
                variables: {
                    len: length,
                    query: question
                }
            }];
    }
    isValidLanguage(lang) {
        return config_1.languages.includes(lang.toLowerCase());
    }
    /**
     * This function will return brainly site url from your country selection in the constructor
     *
     * @returns {String} - A base url of your country selection
     */
    getBaseURL(lang) {
        return config_1.baseURLs[lang];
    }
    /**
     * Use this function if you want get random user agent.
     *
     */
    getAgent() {
        return random_useragent_1.default.getRandom();
    }
}
exports.default = Brainly;
